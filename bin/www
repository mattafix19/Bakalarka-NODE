#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-postgres:server');
var http = require('http').Server(app);

var client = require('socket.io-client');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




//-----------------------------



var io = require("socket.io")(http);

io.on('connection', function (socket) {
  console.log('Client connected.');


  socket.on('add-customer', function (message) {
    console.log("Message from browser broadcasted: " + message.text);
    var updated_message = {
      text: message.text,
      port: PORT
    };

    io.emit('notification', updated_message);
    //socket2.emit('server_message', updated_message);

  });

  socket.on('disconnect', function () {
    console.log('Client disconnected.');
  });
});

io.on('connect', function (socket1) {
  socket1.on('server_message', function (message) {
    console.log('RECEIVED MESSAGE FROM ANOTHER SERVER ON PORT ' + message.port + ": " + message.text);
  });
});

io.on('connect', function (socket2) {
  socket1.on('server_message', function (message) {
    console.log('RECEIVED MESSAGE FROM ANOTHER SERVER ON PORT ' + message.port + ": " + message.text);
  });
});
